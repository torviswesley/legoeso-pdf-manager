[
    {
        "ID": "31",
        "image_url": "http://demo2.legoeso.com/wp-content/uploads/2022/11/legoeso_pdm_data/images/1511669805738.jpg",
        "filename": "pdfparser-pdf",
        "category": "General",
        "upload_userid": "torviswesley",
        "date_uploaded": "2022-11-30",
        "text_data": "E xtr a ctin g T ext & Im ages fr o m P D F F ile s A ugust 0 4, 2 010 Update : J a nuary 2 9, 2 012 I'v e c o rre cte d th is c o de to w ork w it h th e cu rre nt v e rs io n o f p dfm in er a nd it 's n ow a va ila ble a s a g it h ub r e po: http s://g it h ub.c o m /d papath anasio u/p dfm in er-la yo ut- s ca nner PD FM in er is a pdf p ars in g lib ra ry w rit te n in Pyth on b y Yusu ke S hin ya m a . In a ddit io n to th e pdf2 tx t.p y a nd dum ppdf.p y c o m mand lin e to ols , th ere is a w ay o f analy zin g th e c o nte nt tr e e o f e ach p age . Sin ce th at's exa ctly th e k in d o f p ro gra m matic p ars in g I w ante d to u se P D FM in er fo r, th is is a m ore c o m ple te e xa m ple , w hic h c o ntin ues where th e d efa ult d ocu m enta tio n s to ps . This e xa m ple is s till a w ork -in -p ro gre ss, w it h ro om fo r im pro ve m ent . In th e n ext fe w s e ctio ns, I d escrib e h ow I b uilt u p e ach fu nctio n, r e so lv in g p ro ble m s I e nco unte re d a lo ng th e w ay. T he im patie nt c a n ju st get th e c o de h ere in ste ad. Basic F ra m ew ork Here a re th e p yth on im ports w e n eed fo r P D FM in er: from pdfminer.pdfparser import PDFParser, PDFDocument, PDFNoOutlines from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter from pdfminer.converter import PDFPageAggregator from pdfminer.layout import LAParams, LTTextBox, LTTextLine, LTFigure, LTImage Sin ce P D FM in er r e quir e s a s e rie s o f in it ia liz a tio ns fo r e ach p df file , I'v e s ta rte d w it h th is w ra pper ( Lis p m acro s ty le ) fu nctio n to ta ke c a re o f th e b asic p re lim in ary a ctio ns ( file IO , P D FM min er o bje ct c re atio n a nd c o nnectio n, e tc .) . def with_pdf (pdf_doc, pdf_pwd, fn, *args): \"\"\"Open the pdf document, and apply the function, returning the results\"\"\" result = None try: # open the pdf file fp = open(pdf_doc, 'rb') # create a parser object associated with the file object parser = PDFParser(fp) # create a PDFDocument object that stores the document structure doc = PDFDocument() # connect the parser and document objects parser.set_document(doc) doc.set_parser(parser) # supply the password for initialization doc.initialize(pdf_pwd) if doc.is_extractable: # apply the function and return the result result = fn(doc, *args) # close the pdf file fp.close() except IOError: # the file doesn't exist or similar problem pass return result The fir s t tw o p ara m ete rs a re th e n am e o f th e p df file , a nd it s p assw ord . T he th ir d p ara m ete r, fn , is a hig her-o rd er fu nctio n w hic h ta ke s th e in sta nce o f th e p dfm in er.p dfp ars e r.P D FD ocu m ent c re ate d, a nd a pplie s w hate ve r a ctio n w e w ant ( g et th e ta ble o f c o nte nts , w alk th ro ugh th e pdf p age b y p age, e tc .) The la st p art o f th e s ig natu re , * a rg s, is a n o ptio nal lis t o f p ara m ete rs th at c a n b e p asse d to th e h ig h-o rd er fu nctio n a s n eeded ( I c o uld h ave gone w it h ke yw ord a rg um ents h ere in ste ad, b ut a s im ple lis t is e nough fo r th ese e xa m ple s). As a w arm -u p, h ere 's a n e xa m ple o f h ow to u se th e w it h _pdf( ) fu nctio n to fe tc h th e ta ble o f c o nte nts fr o m a p df file : def _parse_toc (doc): \"\"\"With an open PDFDocument object, get the table of contents (toc) data [this is a higher-order function to be passed to with_pdf()]\"\"\" toc = [] try: outlines = doc.get_outlines() for (level,title,dest,a,se) in outlines: toc.append( (level, title) ) except PDFNoOutlines: pass return toc The _ pars e _to c() fu nctio n is th e h ig her-o rd er fu nctio n w hic h g ets p asse d to w it h _pdf( ) a s th e fn p ara m ete r. It e xp ects a s in gle p ara m ete r, doc, w hic h is th e th e in sta nce o f th e p dfm in er.p dfp ars e r.P D FD ocu m ent c re ate d w it h in w it h _pdf( ) it s e lf ( n ote th at if w it h _pdf( ) c o uld n't fin d th e file , th en _ pars e _to c() d oesn 't g et c a lle d). Wit h a ll th e P D FM in er o ve rh ead a nd in it ia liz a tio n d one b y w it h _pdf( ), _ pars e _to c() c a n ju st fo cu s o n c o lle ctin g th e ta ble o f c o nte nt d ata a nd re tu rn in g th em a s a lis t. T he g et_ outlin es() c a n r a is e a \" P D FN oO utlin es\" e rro r, s o I c a tc h it a s a n e xce ptio n, a nd s im ply r e tu rn a n e m pty lis t in th at c a se . All th at's le ft to d o is d efin e th e fu nctio n th at in vo ke s _ pars e _to c() fo r a s p ecif ic p df file ; th is is a ls o th e fu nctio n th at a ny e xte rn al u se rs o f th is m odule w ould u se to g et th e ta ble o f c o nte nts lis t. N ote th at th e p df p assw ord d efa ult s to a n e m pty s tr in g ( w hic h is w hat P D FM in er w ill use fo r d ocu m ents th at a re n't p assw ord -p ro te cte d), b ut th at c a n b e o ve rrid en a s n eeded. def get_toc (pdf_doc, pdf_pwd=''): \"\"\"Return the table of contents (toc), if any, for this pdf file\"\"\" return with_pdf(pdf_doc, pdf_pwd, _parse_toc) Pag e P ars in g Next, o nto la yo ut a naly sis . U sin g th e w it h _pdf( ) w ra pper, w e c a n r e pro duce th e e xa m ple in th e d ocu m enta tio n w it h th is h ig her-o rd er fu nctio n: def _parse_pages (doc): \"\"\"With an open PDFDocument object, get the pages and parse each one [this is a higher-order function to be passed to with_pdf()]\"\"\" rsrcmgr = PDFResourceManager() laparams = LAParams() device = PDFPageAggregator(rsrcmgr, laparams=laparams) interpreter = PDFPageInterpreter(rsrcmgr, device) for page in doc.get_pages(): interpreter.process_page(page) # receive the LTPage object for this page layout = device.get_result() # layout is an LTPage object which may contain child objects like LTTextBox, LTFigure, LTImage, etc. And th is e xte rn al fu nctio n, w hic h d efin es th e s p ecif ic p df file to a naly ze : def get_pages (pdf_doc, pdf_pwd=''): \"\"\"Process each of the pages in this pdf file\"\"\" with_pdf(pdf_doc, pdf_pwd, _parse_pages) So fa r, th is c o de d oesn 't d o a nyth in g e xcit in g: it ju st lo ads e ach p age in to a p dfm in er.la yo ut.L T P age o bje ct, c lo se s th e p df file , a nd e xit s . Wit h in e ach p dfm in er.la yo ut.L T P age in sta nce , th ough, is a n o bjs a ttr ib ute , w hic h d efin es th e tr e e o f p dfm in er.la yo ut.L T * c h ild o bje cts a s in th e d ocu m enta tio n: In th is e xa m ple , I'm g oin g to c o lle ct a ll th e te xt fr o m e ach p age in a to p-d ow n, le ft- to -rig ht s e quence , m erg in g a ny m ult ip le c o lu m ns in to a sin gle s tr e am o f c o nse cu tiv e te xt. The r e su lt s a re n ot a lw ays p erfe ct, b ut I'm u sin g a fu zzy lo gic b ase d o n p hysic a l p osit io n a nd c o lu m n w id th , w hic h is v e ry g ood in m ost ca se s. I'm a ls o g oin g to s a ve a ny im ages fo und to a s e para te fo ld er, a nd m ark th eir p osit io n in th e te xt w it h < im g /> ta gs. Rig ht n ow , I'm o nly a ble to e xtr a ct jp eg im ages, w here as x p df's pdfim ages to ol is c a pable o f g ettin g to n on-jp eg im ages a nd s a vin g th em a s ppm fo rm at. I'm n ot s u re if th e p ro ble m is w it h in P D FM in er o r h ow I'm u sin g it , b ut s in ce so m eone e ls e a ske d th e s a m e q uestio n in th e P D FM in er m ailin g lis t , I s u sp ect it 's th e fo rm er. This r e quir e s a fe w u pdate s to th e _ pars e _pages() fu nctio n, a s fo llo w s: def _parse_pages (doc, images_folder): \"\"\"With an open PDFDocument object, get the pages, parse each one, and return the entire text [this is a higher-order function to be passed to with_pdf()]\"\"\" rsrcmgr = PDFResourceManager() laparams = LAParams() device = PDFPageAggregator(rsrcmgr, laparams=laparams) interpreter = PDFPageInterpreter(rsrcmgr, device) text_content = [] # a list of strings, each representing text collected from each page of the doc for i, page in enumerate(doc.get_pages()): interpreter.process_page(page) # receive the LTPage object for this page layout = device.get_result() # layout is an LTPage object which may contain child objects like LTTextBox, LTFigure, LTImage, etc. text_content.append(parse_lt_objs(layout.objs, (i+1), images_folder)) return text_content and th e u pdate d g et_ pages() fu nctio n b eco m es: def get_pages (pdf_doc, pdf_pwd='', images_folder='/tmp'): \"\"\"Process each of the pages in this pdf file and print the entire text to stdout\"\"\" print '\\n\\n'.join(with_pdf(pdf_doc, pdf_pwd, _parse_pages, *tuple([images_folder]))) New in b oth fu nctio nal s ig natu re s is im ages_ fo ld er, w hic h is a p ara m ete r th at r e fe rs to th e p la ce o n th e lo ca l file syste m w here a ny e xtr a cte d im ages w ill b e b e s a ve d ( th is is a ls o a n e xa m ple o f w hy d efin in g w it h _pdf( ) w it h a n o ptio nal * a rg s lis t c o m es in h andy). Aggre g atin g T ext Wit h in th e _ pars e _pages() fu nctio n, te xt_ co nte nt is a n ew v a ria ble o f ty p e lis t, w hic h c o lle cts th e te xt o f e ach p age, a nd I'v e a dded a n enum era tio n s tr u ctu re a ro und d oc.g et_ pages(), to k e ep tr a ck o f w hic h p age w e'r e a cce ssin g a t a ny g iv e n tim e. T his is u se fu l fo r s a vin g im ages c o rre ctly , s in ce s o m e p df file s u se th e s a m e im age n am e in m ult ip le p la ce s to r e fe r to d if fe re nt im ages ( th is c re ate s p ro ble m s fo r dum ppdf.p y's - i s w it c h , fo r e xa m ple ). The n ew c rit ic a l lin e in _ pars e _pages() is th is o ne: text_content.append(parse_lt_objs(layout.objs, (i+1), images_folder)) Sin ce th e tr e e o f p age o bje cts is r e cu rs iv e in n atu re ( e .g ., a p dfm in er.la yo ut.L T Fig ure o bje ct m ay h ave m ult ip le c h ild o bje cts ), it 's b ette r to handle th e a ctu al te xt p ars in g a nd im age c o lle ctio n in a s e para te fu nctio n. T hat fu nctio n, p ars e _lt _ objs (), lo oks lik e th is : def parse_lt_objs (lt_objs, page_number, images_folder, text=[]): \"\"\"Iterate through the list of LT* objects and capture the text or image data contained in each\"\"\" text_content = [] for lt_obj in lt_objs: if isinstance(lt_obj, LTTextBox) or isinstance(lt_obj, LTTextLine): # text text_content.append(lt_obj.get_text()) elif isinstance(lt_obj, LTImage): # an image, so save it to the designated folder, and note it's place in the text saved_file = save_image(lt_obj, page_number, images_folder) if saved_file: # use html style tag to mark the position of the image within the text text_content.append('') else: print >> sys.stderr, \"Error saving image on page\", page_number, lt_obj.__repr__ elif isinstance(lt_obj, LTFigure): # LTFigure objects are containers for other LT* objects, so recurse through the children text_content.append(parse_lt_objs(lt_obj.objs, page_number, images_folder, text_content)) return '\\n'.join(text_content) In th is e xa m ple , I'm c o nce rn ed w it h ju st fo ur o bje cts w hic h m ay a ppear w it h in a p dfm in er.la yo ut.L T P age o bje ct: 1 . LT TextB ox a nd L LT extL in e ( w hic h , b eca use th e te xt e xtr a ctio n is e xa ctly th e s a m e, I tr e at a s o ne c a se ) 2 . LT Im age ( w hic h w e'l l tr y to s a ve o n to th e lo ca l file syste m in th e d esig nate d fo ld er) 3 . LT Fig ure ( w hic h w e'l l tr e at a s a s im ple c o nta in er fo r o th er o bje cts , h ence th e r e cu rs iv e c a ll in th at c a se ) For th e s im ple te xt a nd im age e xtr a ctio n I'm d oin g h ere , th is is e nough. T here is r o om fo r im pro ve m ent, th ough, s in ce I'm ig norin g s e ve ra l ty p es o f p dfm in er.la yo ut.L T * o bje cts w hic h d o a ppear in p df p ages. If y o u tr y to r u n g et_ pages() n ow , y o u m ig ht g et th is e rro r, in th e te xt_ co nte nt.a ppend(lt _ obj. g et_ te xt( )) lin e ( it w ill d epend o n th e c o nte nt o f th e p df file y o u'r e tr y in g to p ars e , a s w ell a s h ow y o ur in sta nce o f P yth on is c o nfig ure d, a nd w heth er o r n ot y o u in sta lle d P D FM in er w it h cm ap fo r C JK la nguages ). UnicodeEncodeError: 'ascii' codec can't encode character u'\\u2014' in position 61: ordinal not in range(128) As E lio t e xp la in s, \" This e rro r o ccu rs w hen y o u p ass a U nic o de s tr in g c o nta in in g n on-E nglis h c h ara cte rs ( U nic o de c h ara cte rs b eyo nd 1 28) to so m eth in g th at e xp ects a n A SC II b yte str in g. T he d efa ult e nco din g fo r a P yth on b yte str in g is A SC II .\" This fu nctio n, w hic h I w ro te a fte r r e adin g th is a rtic le , s o lv e s th e p ro ble m : def to_bytestring (s, enc='utf-8'): \"\"\"Convert the given unicode string to a bytestring, using the standard encoding, unless it's already a bytestring\"\"\" if s: if isinstance(s, str): return s else: return s.encode(enc) So th e u pdate d v e rs io n o f p ars e _lt _ objs () b eco m es: def parse_lt_objs (lt_objs, page_number, images_folder, text=[]): \"\"\"Iterate through the list of LT* objects and capture the text or image data contained in each\"\"\" text_content = [] for lt_obj in lt_objs: if isinstance(lt_obj, LTTextBox) or isinstance(lt_obj, LTTextLine): # text text_content.append(lt_obj.get_text()) elif isinstance(lt_obj, LTImage): # an image, so save it to the designated folder, and note it's place in the text saved_file = save_image(lt_obj, page_number, images_folder) if saved_file: # use html style tag to mark the position of the image within the text text_content.append('') else: print >> sys.stderr, \"Error saving image on page\", page_number, lt_obj.__repr__ elif isinstance(lt_obj, LTFigure): # LTFigure objects are containers for other LT* objects, so recurse through the children text_content.append(parse_lt_objs(lt_obj.objs, page_number, images_folder, text_content)) return '\\n'.join(text_content) Runnin g th is v e rs io n g iv e s r e aso nable r e su lt s o n p df file s w here th e te xt is s in gle -c o lu m n, a nd w it h out m any s id ebars , a bstr a cts , s u m mary quote s, o r o th er fa ncy ty p ese ttin g la yo uts . It r e ally b re aks d ow n, th ough, in th e c a se o f m ult i- c o lu m n p ages: th e r e su lt in g te xt_ co nte nt ju m ps fr o m o ne p ara gra ph to th e n ext, in n o co here nt o rd er. PD FM in er d oes p ro vid e tw o g ro upin g fu nctio ns, g ro up_te xtb ox_ lr _ tb a nd g ro up_te xtb ox_ tb _rl [lr = le ft- to -rig ht, tb = to p-to -b otto m ], b ut th ey d o th e g ro upin g lit e ra lly , w it h out c o nsid erin g th e lik e lih ood th at th e c o nte nt o f o ne te xtb ox lo gic a lly b elo ngs a fte r a noth er's . Fortu nate ly , th ough, e ach o bje ct a ls o p ro vid es a b box ( b oundin g b ox) a ttr ib ute , w hic h is a fo ur-p art tu ple o f th e o bje ct's p age p osit io n: ( x 0 , y0 , x 1 , y 1 ). Usin g th e b box d ata , w e c a n g ro up th e te xt a cco rd in g to it s p osit io n a nd w id th , m akin g it m ore lik e ly th e c o lu m ns w e jo in to geth er th is w ay re pre se nt th e c o rre ct lo gic a l flo w o f th e te xt. To a ggre gate th e te xt th is w ay, I a dded th e fo llo w in g P yth on d ic tio nary v a ria ble to th e p ars e _lt _ objs () c o de, ju st b efo re it e ra tin g th ro ugh th e lis t o f lt _ objs : p age_te xt= {}. The k e y fo r e ach e ntr y is a tu ple o f th e b box's ( x 0 , x 1 ) p oin ts , a nd th e c o rre sp ondin g v a lu e is a lis t o f te xt s tr in gs fo und w it h in th at b box. T he x0 v a lu e te lls m e th e le ft o ffs e t fo r a g iv e n p ie ce o f te xt a nd th e x 1 v a lu e te lls m e h ow w id e it is . So b y g ro upin g te xt w hic h s ta rts a t th e s a m e h oriz o nta l p la ne a nd h as th e s a m e w id th , I c a n a ggre gate a ll p ara gra phs b elo ngin g to th e sa m e c o lu m n, r e gard le ss o f th eir v e rtic a l p osit io n o r le ngth . Conce ptu ally , e ach e ntr y in th e p age_te xt d ic tio nary r e pre se nts a ll th e te xt a sso cia te d w it h e ach p hysic a l c o lu m n. When I tr ie d th is th e fir s t tim e, I w as s u rp ris e d ( th ough in r e tr o sp ect, I s h ould n't h ave b een, s in ce n oth in g a bout p ars in g p dfs is n eat o r cle an), th at tw o te xtb oxe s w hic h lo ok p erfe ctly a lig ned v is u ally h ave s lig htly d if fe re nt x 0 a nd x 1 v a lu es ( a t le ast a cco rd in g to P D FM in er). For e xa m ple , o ne p ara gra ph m ay h ave x 0 a nd x 1 v a lu es o f 2 8.1 6 a nd 1 53.3 2 r e sp ectiv e ly , a nd th e p ara gra ph r ig ht u ndern eath it h ad a n x 0 va lu e o f 2 9.0 4 a nd a n x 1 v a lu e o f 1 52.0 9. To g et a ro und th is , I w ro te th e fo llo w in g u pdate fu nctio n, w hic h a ssig ns k e y tu ple s b ase d o n h ow c lo se a n ( x 0 , x 1 ) p air lie s w it h in a n e xis tin g entr y 's k e y. T he 2 0 p erc e nt v a lu e w as a rriv e d a t b y tr ia l- a nd-e rro r, a nd s e em s to b e a cce pta ble fo r m ost p df file s I tr ie d. def update_page_text_hash (h, lt_obj, pct=0.2): \"\"\"Use the bbox x0,x1 values within pct% to produce lists of associated text within the hash\"\"\" x0 = lt_obj.bbox[0] x1 = lt_obj.bbox[2] key_found = False for k, v in h.items(): hash_x0 = k[0] if x0 >= (hash_x0 * (1.0-pct)) and (hash_x0 * (1.0+pct)) >= x0: hash_x1 = k[1] if x1 >= (hash_x1 * (1.0-pct)) and (hash_x1 * (1.0+pct)) >= x1: # the text inside this LT* object was positioned at the same # width as a prior series of text, so it belongs together key_found = True v.append(to_bytestring(lt_obj.get_text())) h[k] = v if not key_found: # the text, based on width, is a new series, # so it gets its own series (entry in the hash) h[(x0,x1)] = [to_bytestring(lt_obj.get_text())] return h Wit h th is in p la ce , I c o uld u pdate th e p ars e _lt _ objs () to u se it . def parse_lt_objs (lt_objs, page_number, images_folder, text=[]): \"\"\"Iterate through the list of LT* objects and capture the text or image data contained in each\"\"\" text_content = [] page_text = {} # k=(x0, x1) of the bbox, v=list of text strings within that bbox width (physical column) for lt_obj in lt_objs: if isinstance(lt_obj, LTTextBox) or isinstance(lt_obj, LTTextLine): # text, so arrange is logically based on its column width page_text = update_page_text_hash(page_text, lt_obj) elif isinstance(lt_obj, LTImage): # an image, so save it to the designated folder, and note it's place in the text saved_file = save_image(lt_obj, page_number, images_folder) if saved_file: # use html style tag to mark the position of the image within the text text_content.append('') else: print >> sys.stderr, \"error saving image on page\", page_number, lt_obj.__repr__ elif isinstance(lt_obj, LTFigure): # LTFigure objects are containers for other LT* objects, so recurse through the children text_content.append(parse_lt_objs(lt_obj.objs, page_number, images_folder, text_content)) for k, v in sorted([(key,value) for (key,value) in page_text.items()]): # sort the page_text hash by the keys (x0,x1 values of the bbox), # which produces a top-down, left-to-right sequence of related columns text_content.append('\\n'.join(v)) return '\\n'.join(text_content) The la st b lo ck b efo re th e r e tu rn s ta te m ent s o rts th e p age_te xt ( x 0 , x 1 ) k e ys s o th at th e r e su lt in g te xt is r e tu rn ed in a to p-d ow n, le ft- to -rig ht se quence , b ase d o n w here th e te xt a ppeare d v is u ally o n th e p age. Extr a ctin g Im ag es The la st th in g to d is cu ss in th is e xa m ple is th e e xtr a ctio n o f im ages. As I m entio ned a bove , th is a re a n eeds im pro ve m ent, s in ce it s e em s th at I c a n o nly e xtr a ct jp eg im ages u sin g P D FM in er ( th ough to b e fa ir to Yusu ke , h e d oes d escrib e it a s a to ol th at \" fo cu se s e ntir e ly o n g ettin g a nd a naly zin g te xt d ata \", s o p erh aps d oin g m ore th an jp eg is o ut- o f- sco pe fo r th is lib ra ry ). Wit h in p ars e _lt _ objs (), th e fo llo w in g fu nctio n is c a lle d if a n L T Im age is fo und; it w as b ase d o n s tu dyin g th e dum ppdf.p y s o urc e c o de a nd how it h andle d im age e xtr a ctio n r e quests : def save_image (lt_image, page_number, images_folder): \"\"\"Try to save the image data from this LTImage object, and return the file name, if successful\"\"\" result = None if lt_image.stream: file_stream = lt_image.stream.get_rawdata() file_ext = determine_image_type(file_stream[0:4]) if file_ext: file_name = ''.join([str(page_number), '_', lt_image.name, file_ext]) if write_file(images_folder, file_name, lt_image.stream.get_rawdata(), flags='wb'): result = file_name return result The s a ve _im age() fu nctio n n eeds th e fo llo w in g tw o s u pportin g fu nctio ns d efin ed: def determine_image_type (stream_first_4_bytes): \"\"\"Find out the image file type based on the magic number comparison of the first 4 (or 2) bytes\"\"\" file_type = None bytes_as_hex = b2a_hex(stream_first_4_bytes) if bytes_as_hex.startswith('ffd8'): file_type = '.jpeg' elif bytes_as_hex == '89504e47': file_type = ',png' elif bytes_as_hex == '47494638': file_type = '.gif' elif bytes_as_hex.startswith('424d'): file_type = '.bmp' return file_type The d ete rm in e_im age_ty p e() fu nctio n is b ase d o n th e c o nce pt o f magic n um bers , w here it 's ( s o m etim es) p ossib le to te ll w hat a b in ary str e am m eans b y e xm ain g th e fir s t tw o o r fo urs b yte s. In th eory , a p df file c a n h ave a ny o f th ese im age ty p es, b ut in p ra ctic e , th e o nly o ne P D FM in er c a n s e em to fin d a s a n L T Im age o bje ct a re jp egs. def write_file (folder, filename, filedata, flags='w'): \"\"\"Write the file data to the folder and filename combination (flags: 'w' for write text, 'wb' for write binary, use 'a' instead of 'w' for append)\"\"\" result = False if os.path.isdir(folder): try: file_obj = open(os.path.join(folder, filename), flags) file_obj.write(filedata) file_obj.close() result = True except IOError: pass return result The w rit e _file () fu nctio n is ju st b asic file IO , b ut it d oes s o m e c o nve nie nt th in gs a ro und c h eckin g th at th e d esig nate d fo ld er e xis ts , to o. Fin ally , to s u pport a ll th re e im age s a vin g fu nctio ns, w e n eed th e fo llo w in g p yth on im ports : import sys import os from binascii import b2a_hex Sam ple R esu lt s So, h ow w ell d oes it w ork ? It's s u rp ris in gly g ood, a s it tu rn s o ut. Here 's a n e xa m ple fr o m u sin g th e a bove c o de to p ro ce ss th e Hacke r M onth ly Is su e 2 p df file ( th is w as p art o f th e p ro ce ss I u se d to c o nve rt th is file to e -b ook fo rm at fo r in clu sio n in th e Fif o books C ata lo g ). Page 5 , w hic h lo oks lik e th is v is u ally : ca m e o ut lik e th is : \"Leave the ad revenue and crazy business model revenue streams to the startups with venture funding.\" on the company. But the advantage here is that after a few months off the ground you'll have a clear sense of how soon that day can come. Another advantage of a bootstrapped company on the SaaS model is that it's really easy to calculate your cash flow. It goes without saying that the people you work with should have complementary skills to your own, but the bootstrapper's \"slow but steady\" mindset is just as important to the health of your company. you'll find a lot of people may not be comfortable with this approach. Weed those people out as co-found- ers when you're bootstrapping a company. A one and done approach won't work here. off Hours Almost every bootstrapped company begins as an off-hours tinkering project. That's true of Carbonmade, which Dave built for himself first; that's true of TypeFrag, which I built over the course of a week during my sophomore year in college; that's true of 37signals' Basecamp, true of Anthony's Hype Machine and lots of other companies. The good thing about bootstrap- ping is that you don't need to spend ping is that you don't need to spend a single penny outside of server costs and you can even do most things locally before having to pay any money on a server. your biggest expense is time, and that's why off hours are so important. Consult on the Side The way we started Carbonmade, the way 37signals started, the way Harvest started, and many other startups too, was by first running a consulting shop. We ran a design con- sulting company called nterface that Carbonmade grew out of. It's great, because the money you're bringing in through client work tides you over while you're waiting for your startup to grow. Carbonmade was live for nearly 18 months before we started working on it full-time. During those first 18 months, we were taking on lots of client work to pay our bills. The great thing about consulting through the early months is that you can take on fewer and fewer jobs as your revenue builds up. For example, you may need a dozen large projects during the first year and only two or three during the second year. That was the case for us. I know of other successful bootstrapped companies that during the first year would take on a single client project for a month or two, charging an appropriate amount, and that would give them just enough leeway to work on their startup for two or three months. Then they'd rinse and repeat. They did this for the first year and a half before making enough money to work on their startup full-time. there's no need to Rush When you're bootstrapping there's no rush to get things out the door, even though that's all you hear these 5 While th ere w ere s o m e s m all p ro ble m s a ro und c a pit a liz a tio n a nd s p acin g, th e c o nve rs io n d id r e co gniz e a nd s a ve th e b ackg ro und im age, it dis tin guis h ed th e s u m mary q uote a s b ein g s e para te fr o m th e r e st o f th e te xt, a nd th e c o lu m ns w ere m erg ed c o rre ctly , flo w in g in th e s a m e manner th e a uth or w ro te th em . Room f o r Im pro vem en t There a re s e ve ra l th in gs I'd lik e to b e a ble to d o b ette r; s o m e p ro bably r e quir e c h anges to P D FM in er it s e lf , w hile o th ers a re th in gs in m y co de w hic h I s h ould im pro ve . Colu m n M erg in g  w hile th e fu zzy h euris tic I d escrib ed w ork s w ell fo r th e p df file s I'v e p ars e d s o fa r, I c a n im agin e m ore c o m ple x docu m ents w here it w ould b re ak-d ow n ( p erh aps th is is w here th e a naly sis s h ould b e m ore s o phis tic a te d, a nd n ot ig nore s o m any ty p es o f p dfm in er.la yo ut.L T * o bje cts ). Im age E xtr a ctio n  I'd lik e to b e a ble to b e at le ast a s g ood a s p dfto im ages, a nd s a ve e ve ry file in p pm o r p nm d efa ult fo rm at, b ut I'm not s u re w hat I c o uld b e d oin g d if fe re ntly Tit le a nd H eadin g C apit a liz a tio n  th is s e em s to b e a n is su e w it h P D FM in er, s in ce I g et s im ila r r e su lt s in u sin g th e c o m mand lin e to ols , b ut it is a nnoyin g to h ave to g o b ack a nd fix a ll th e m is -c a pit a liz a tio ns m anually , p artic u la rly fo r la rg er d ocu m ents . Tit le a nd H eadin g F onts a nd S pacin g  a r e la te d is su e, th ough p ro bably s o m eth in g in m y o w n c o de, is th at th ose s a m e tit le a nd para gra ph h eadin gs a re n't d is tin guis h ed fr o m th e r e st o f th e te xt. In m any c a se s, I h ave to g o b ack a nd a dd v e rtic a l s p acin g a nd fo nt attr ib ute s fo r th ose m anually . Page N um ber R em ova l  o rig in ally , I th ought I c o uld ju st u se a r e gex fo r a n a ll- n um eric v a lu e o n a s in gle p hysic a l lin e, b ut e ach docu m ent d oes p age n um berin g s lig htly d if fe re ntly , a nd it 's v e ry d if fic u lt to g et r id o f th ese w it h out m anually p ro ofr e adin g e ach p age. Footn ote s  h andlin g th ese w here th e n ote a nd th e r e fe re nce b oth a ppear o n th e s a m e p age is h ard e nough, b ut d oin g it w hen th ey sp an d if fe re nt ( e ve n c o nse cu tiv e ) p ages is w ors e . Arc h iv e d fr o m th e o rig in al a t http ://d enis .p apath anasio u.o rg / B it c o in D onate : 14T M 4A D KJb aG Ei8 Q r8 dh4K fP BQ m jT sh kZ 2",
        "metadata": "{\"Title\":\"Extracting Text & Images from PDF Files\",\"Creator\":\"wkhtmltopdf 0.12.4\",\"Producer\":\"Qt 4.8.7\",\"CreationDate\":\"2018-03-04T14:32:30-05:00\",\"Pages\":10,\"FileSize\":\"211kB\",\"PdfVersion\":\"PDF-1.4 1\"}"
    },
    {
        "ID": "32",
        "image_url": "http://demo2.legoeso.com/wp-content/uploads/2022/11/legoeso_pdm_data/images/521669805782.jpg",
        "filename": "mccrindle-consumer-confidence-towards-purchasing-class-2-residential-pdf",
        "category": "Python",
        "upload_userid": "torviswesley",
        "date_uploaded": "2022-11-30",
        "text_data": "* NO DATA *",
        "metadata": "{\"Title\":\"The state of consumer confidence: benchmarking consumer confidence towards purchasing class 2 residential properties in NSW\",\"Producer\":\"macOS Version 12.3.1 (Build 21E258) Quartz PDFContext\",\"Author\":\"NSW Government\",\"Subject\":\"A report about consumer confidence in purchasing residential properties. \",\"Creator\":\"Microsoft\\u00ae Word for Microsoft 365\",\"CreationDate\":\"2022-05-27T01:27:46+00:00\",\"ModDate\":\"2022-05-27T01:27:46+00:00\",\"Pages\":54,\"FileSize\":\"10.81MB\",\"PdfVersion\":\"PDF-1.3 %\"}"
    },
    {
        "ID": "33",
        "image_url": "http://demo2.legoeso.com/wp-content/uploads/2022/11/legoeso_pdm_data/images/1241669807519.jpg",
        "filename": "invoice-smart-form-vendor-manual-pdf",
        "category": "General",
        "upload_userid": "torviswesley",
        "date_uploaded": "2022-11-30",
        "text_data": " INVOICE SMART FORM – VENDOR MANUAL  Engineering Financial Services (EFS)    Page 1 of 19 – Invoice Smart Form– Vendor Manual – v3.1                                      03/25/2021         2020  Invoice Smart Forms Vendor Manual                  Engineering Financial Services (EFS)  ENGINEERING DEPARTMENT, OPERATIONS DIVISION                INVOICE SMART FORM – VENDOR MANUAL  Engineering Financial Services (EFS)    Page 2 of 19 – Invoice Smart Form– Vendor Manual – v3.1                                      03/25/2021         Contents BACKGROUND................................................................................................................................................................... 3  BENEFITS ........................................................................................................................................................................... 3  HOW TO ............................................................................................................................................................................ 4  SPECIAL CASE INVOICING PRACTICE ............................................................................................................................... 17  GENERAL VENDOR INVOICING REQUIREMENTS ............................................................................................................ 19         INVOICE SMART FORM – VENDOR MANUAL  Engineering Financial Services (EFS)    Page 3 of 19 – Invoice Smart Form– Vendor Manual – v3.1                                      03/25/2021         BACKGROUND    The Engineering Financial Services (EFS) Unit is utilizing a structure that tracks Vendor invoices from the  time invoices are received to a system‐specific email inbox to the time invoices are paid. The Engineering  Invoice Management System (EIMS) provides streamlining of processes and transparency, as each invoice  is reviewed and signed  electronically and advanced under one homogenous workflow. As part of our  commitment for continued improvement, we are pleased to announce an upgrade to EIMS.    This vendor manual offers instructions for the following Invoice Smart Form versions:     Standard version 2021.01.1   Federally Funded version 2021.03.1   Lump Sum version 2021.02.1     EIMS does NOT accept invoice submissions in prior versions. The version number is located at the bottom‐ right of Tab 2 Pg1 Invoice tab in the Smart Forms.     BENEFITS    The new version is designed to improve quality, accuracy and increase invoice turnaround period with the  following new features:    1. One email account (ENG‐Invoices@panynj.gov) for all invoice submission  2. Multiple invoices per email submission by Vendor  3. Invoice template for EIMS Phase II is a readable Smart Form  4. No conversion of readable Smart Form to PDF required  5. Auto‐generated notifications to Vendors   6. Validation checks for required cells  7. Auto font‐size reduction for free‐form cells  to insert extended text    Auto‐generated email notifications to Vendors include detailed explanations for the following reasons:    1. Confirmation of receipt   2. Declined by EIMS due to failed validation   3. On‐hold for issue resolution and Resumed (previously placed on hold) invoice  4. Voided by PANYNJ EIMS reviewer  5. Partial payment  6. Paid invoice  (full payment or partial payment)             INVOICE SMART FORM – VENDOR MANUAL  Engineering Financial Services (EFS)    Page 4 of 19 – Invoice Smart Form– Vendor Manual – v3.1                                      03/25/2021         In addition, EIMS auto‐declines invoices for the following reasons:    1. Not in Smart Form format  2. Not supported standard template  3. Missing Taxpayer Number  4. Missing Vendor Name, Vendor Address or Contact  5. Missing Discipline/Group  6. Missing PO Number  7. Missing Agreement Number  8. Missing Invoice Period Start and/or End date  9. Missing Invoice Number  10. The Smart Form contains  multiple support documents or support documentation is not in PDF  format.  11. Duplicate Invoice Number: An invoice with the same invoice number under the same PO is already  in process in EIMS. You may want to contact EFS to void the previous invoice in case the latest  invoice is meant  to replace the previously submitted invoice.   12. Vendor Name does not match with our internal payment system (SAP) record: A decline email  with the SAP vendor name will be issued in this case. The vendor name must be an exact match.  The difference on space, period and/or comma will lead to  auto‐decline.     HOW TO    The Invoice Smart Form requirements and instructions are displayed below:     Enable macros to ensure Smart Form functions properly                               INVOICE SMART FORM – VENDOR MANUAL  Engineering Financial Services (EFS)    Page 5 of 19 – Invoice Smart Form– Vendor Manual – v3.1                                      03/25/2021          Formulas and tabs are locked   No row, column or tab modifications   Insert PDF supporting documentation to Smart Form (ONLY ONE PDF allowed per Invoice Smart  Form; i.e., timesheets, receipts, Sub‐Vendor invoices, etc.)   Use Paste Values only when copy paste from other files        Tab 1 – Invoice Field Definitions     The list of field definitions is found in the far‐left tab in the Invoice Smart Form.  INVOICE SMART FORM – VENDOR MANUAL  Engineering Financial Services (EFS)    Page 6 of 19 – Invoice Smart Form– Vendor Manual – v3.1                                      03/25/2021         Tab 2 – Pg1 Invoice (Standard)     Select lead Discipline/Group from dropdown list. EIMS reads and directs invoice to appropriate  PANYNJ EIMS end‐user to begin workflow   Check Final Invoice if it is the final invoice of the PO   Populate Sub‐Vendor cells by adding Sub‐Vendor name(s) HERE, not Pg5 Sub‐Vendors Expense  tab   Add additional rows by clicking the “Add Sub‐Vendor” button   Current Invoice Amount data is auto‐populated reflecting data in other tabs   Remaining Budget is auto populated when the Total Work Order Budget, Previously Billed (if any)  and Current Invoice Amount cells are filled   Update  Vendor’s estimate for next month’s invoice   INVOICE SMART FORM – VENDOR MANUAL  Engineering Financial Services (EFS)    Page 7 of 19 – Invoice Smart Form– Vendor Manual – v3.1                                      03/25/2021         Tab 2 – Pg1 Invoice (Federally Funded)     Select lead Discipline/Group from dropdown list. EIMS reads and directs invoice to appropriate  PANYNJ EIMS end‐user to begin workflow   Select the type of Federal Funding from dropdown list    Check Final Invoice if it is the final invoice of the PO   Enter agreed upon Overhead %  and Fixed Fee / Profit %   Populate Sub‐Vendor cells by adding Sub‐Vendor name(s) HERE, not Pg5 Sub‐Vendors Expense tab   Add additional rows by clicking the “Add Sub‐Vendor” button   Current Invoice Amount data is auto‐populated reflecting data in other tabs and fields   INVOICE SMART FORM – VENDOR MANUAL  Engineering Financial Services (EFS)    Page 8 of 19 – Invoice Smart Form– Vendor Manual – v3.1                                      03/25/2021          Remaining Budget is auto populated when the Total Work Order Budget, Previously Billed (if any)  and Current Invoice Amount cells are filled   Update Vendor’s estimate for next month’s invoice      INVOICE SMART FORM – VENDOR MANUAL  Engineering Financial Services (EFS)    Page 9 of 19 – Invoice Smart Form– Vendor Manual – v3.1                                      03/25/2021         Tab 2 – Pg1 Invoice (Lump Sum – Includes Tracking Tab for Small Projects)     Select lead Discipline/Group from dropdown list. EIMS reads and directs invoice to appropriate  PANYNJ EIMS end‐user to begin workflow   Check Final Invoice if it is the final invoice of the PO   Enter Complete % and Fee Earned to Date   Populate Sub‐Vendor cells by adding  Sub‐Vendor name(s) HERE, not Pg5 Sub‐Vendors Expense tab   Add additional rows by clicking the “Add Sub‐Vendor” button   INVOICE SMART FORM – VENDOR MANUAL  Engineering Financial Services (EFS)    Page 10 of 19 – Invoice Smart Form– Vendor Manual – v3.1                                      03/25/2021          Enter Current Invoice Amount for Prime Vendor and each Sub‐Vendor   Remaining Budget is auto populated when the Total Work Order Budget, Previously Billed (if any)  and Current Invoice Amount cells are filled   Update Vendor’s estimate for next month’s invoice      INVOICE SMART FORM – VENDOR MANUAL  Engineering Financial Services (EFS)    Page 11 of 19 – Invoice Smart Form– Vendor Manual – v3.1                                      03/25/2021         Tab 3 – Pg2 Acct (Account) Code Breakdown     Total and each Sub‐total Account Code MUST equal to corresponded amounts in Pg1 Invoice tab  (highlighted in RED when the total does not match):  1) Account Code for Prime Labor MUST equal “Labor Cost” amount;  2) Account Code for Prime Expenses MUST equal “Out‐of‐Pocket Expenses” amount;  3) Account Code for Sub‐vendors MUST equal “Sub‐Vendors” total  4) Total Account Code Breakdown MUST equal “Current Invoice Amount” total   In Sub‐Vendors section, select Sub‐Vendor Name from dropdown list (list is auto populated from  data entered in Pg1 Invoice tab)   Add additional rows by clicking  the “Add Code” button   INVOICE SMART FORM – VENDOR MANUAL  Engineering Financial Services (EFS)    Page 12 of 19 – Invoice Smart Form– Vendor Manual – v3.1                                      03/25/2021         Tab 4 – Pg3 Labor Expense Breakdown     Labor Expense total is auto populated   For Standard invoice, staff eligible for multiplier MUST be listed at the top along with the multiplier  stated in the agreement, regular hours and other hours; i.e., overtime hours;  For Sandy invoice, no multiplier is required   Premium portion (not subject to multiplier)  MUST be listed in the center with premium hourly  rate; i.e., ½ hourly rate along with overtime hours   Partners and Principals (not subject to multiplier) MUST be listed at the bottom with customary  billing rate along with number of hours   Add additional rows by clicking the “Add Staff”  button under each category   INVOICE SMART FORM – VENDOR MANUAL  Engineering Financial Services (EFS)    Page 13 of 19 – Invoice Smart Form– Vendor Manual – v3.1                                      03/25/2021         Tab 5 – Pg4 OOP (Out‐of‐Pocket) Expense       Out‐of‐Pocket Expense Breakdown total is auto populated in Pg1 Invoice tab   Add additional rows by clicking the “Add O‐O‐P Expense” button   INVOICE SMART FORM – VENDOR MANUAL  Engineering Financial Services (EFS)    Page 14 of 19 – Invoice Smart Form– Vendor Manual – v3.1                                      03/25/2021         Tab 6 – Pg5 Sub‐Vendors Expense                                                                                 Sub‐Vendor Expense Breakdown total is auto populated in Pg1 Invoice tab   Select Sub‐Vendor Name from dropdown list (list is auto populated from data entered in Pg1  Invoice tab)   List each Sub‐Vendor invoice separately   Add rows by clicking the “Add Sub‐Vendor Expense” button   INVOICE SMART FORM – VENDOR MANUAL  Engineering Financial Services (EFS)    Page 15 of 19 – Invoice Smart Form– Vendor Manual – v3.1                                      03/25/2021         Tab 7: Pg6 Authorization Breakdown by Stages, Change Orders or Lump Sum Small Projects         For Standard and Lump Sum invoices, the Change Orders or Stages tracking tab is OPTIONAL, as  required and imparted by the Agreement Project Manager (APM)   For Federally Funded invoices, the Stages tracking tab is REQUIRED. Enter the appropriate  information for Stage I – IV   For Lump  Sum Small Projects invoices, the Project tracking tab is REQUIRED. Enter the appropriate  information for projects titles and/or numbers and requested by APM.      INVOICE SMART FORM – VENDOR MANUAL  Engineering Financial Services (EFS)    Page 16 of 19 – Invoice Smart Form– Vendor Manual – v3.1                                      03/25/2021         Tab 8: Support Document – Please read carefully…       The Smart Form must be submitted in its original format ONLY   As a result, insert ONE (1) support document in PDF format ONLY into the Smart Form’s “Support  Document” tab, i.e., timesheets, Sub‐Vendor invoices, expense receipts, etc.   Instructions for support document insertion are located in the Smart  Form’s last tab labeled  “Support Doc Instruction”      Tab 9 – Support Doc Instruction   Instruction of inserting the PDF support document (one file only) into Excel invoice Smart Form        INVOICE SMART FORM – VENDOR MANUAL  Engineering Financial Services (EFS)    Page 17 of 19 – Invoice Smart Form– Vendor Manual – v3.1                                      03/25/2021         SPECIAL CASE INVOICING PRACTICE (contact EFS to verify if this feature applies to you)    1. When Vendor has multiple staff located at various PANYNJ locations (facilities) AND staff is  approved under a single Purchase Order, Vendor MUST submit multiple monthly invoices per  PANYNJ location (facility). Each monthly invoice is tracked, reviewed and paid individually. The  following requirements apply:     Each invoice number MUST incorporate  the consultant staff name for whom Vendor is  invoicing and the PANYNJ location (facility acronym); i.e., for Invoice No. 333, staff name John  Smith and facility LaGuardia Airport (LGA), use Invoice No. “333‐JohnSmith‐LGA” – (no spaces)   PANYNJ facility acronym MUST be selected from the drop‐down list  located in Pg1 Invoice tab   INVOICE SMART FORM – VENDOR MANUAL  Engineering Financial Services (EFS)    Page 18 of 19 – Invoice Smart Form– Vendor Manual – v3.1                                      03/25/2021         2. When Vendor has a single staff located at various PANYNJ locations (facilities) AND staff is  approved under a single Purchase Order, Vendor may CHOOSE ONE of the following two options:    a)                                            b) Select “Other” from the dropdown list in Pg1 Invoice tab AND use Pg3 Labor Expense tab to  list the individual staff name and facility.  Submit multiple monthly invoices, one per PANYNJ location (facility)  NOTE: This method offers quicker invoice turnaround, as each invoice is reviewed by  fewer PANYNJ EIMS end‐users   INVOICE SMART FORM – VENDOR MANUAL  Engineering Financial Services (EFS)    Page 19 of 19 – Invoice Smart Form– Vendor Manual – v3.1                                      03/25/2021           3. For the balance due on a previously disallowed invoice, Vendor MUST submit an invoice using the  same (original) invoice number with the suffix “BALANCE” and a number reflecting if the invoice  balance is being submitted for the first or second time. For example, for original Invoice No. 2088,  use  Invoice No. “2088BALANCE1”. The “Vendor’s estimate for next month’s invoice” should be  “zero.”    4. For a retroactive amount due, Vendor MUST submit an invoice using a new (original) invoice  number with the suffix “RETRO”. For example, for Invoice No. 22556, use Invoice No.  “22556RETRO”. The “Vendor’s estimate for next month’s invoice” should be “zero.”    5. For bills in accordance with a PANYNJ Audit Department report, Vendor MUST submit an invoice  using a new (original) invoice number with the suffix “AUDIT”. For example, for Invoice No. 68997,  use Invoice No. “68997AUDIT”. The “Vendor’s estimate for next month’s invoice” should be “zero.”    6. For a  final invoice in a Purchase Order, Vendor MUST submit an invoice using a new (original)  invoice number and flag the “Final Invoice” indicator located to the right of the “Invoice Number”  field. The “Vendor’s estimate for next month’s invoice” should be “zero.”    GENERAL VENDOR INVOICING REQUIREMENTS     Vendor must bill on or about the 15th of each month for services performed and reimbursable  out‐of‐pocket expenses incurred in the prior month   Invoice must display Vendor's taxpayer and purchase order number (the PANYNJ issued Vendor  number is also required by the Comptroller’s Department)   Vendor and  Sub‐Vendor must keep daily records of time spent, salaries and amounts actually paid  for the performance of services   Vendor and Sub‐Vendor must keep records and receipts of reimbursable expenditures incurred for  the performance of services    For questions or concerns regarding Vendor invoices, please contact one of the following EFS staff:    • For Engineering and Architectural Design Division (Unit 415), Principal Customer Service Manager,  Amy DeNardo at ADeNardo@panynj.gov or 201‐395‐3627    • For all OTHER Engineering Department divisions (including Sandy Projects), Principal Customer  Service Manager, Stacey Gibson Williams at StGibson@panynj.gov or 201‐395‐3651    • Elia Zedeño, Program Director of Financial Performance at EZedeno@panynj.gov or 201‐395‐3674          ",
        "metadata": "{\"Author\":\"yzhuang\",\"CreationDate\":\"2021-03-25T14:52:44-04:00\",\"Creator\":\"PScript5.dll Version 5.2.2\",\"ModDate\":\"2021-03-25T14:52:44-04:00\",\"Producer\":\"Acrobat Distiller 21.0 (Windows)\",\"Title\":\"Microsoft Word - PANYNJ Invoice Smart Form VENDOR MANUAL v3.1 - 03252021\",\"Pages\":19,\"FileSize\":\"2.97MB\",\"PdfVersion\":\"PDF-1.6 %\"}"
    },
    {
        "ID": "36",
        "image_url": "http://demo2.legoeso.com/wp-content/uploads/2022/11/legoeso_pdm_data/images/8091669807608.jpg",
        "filename": "pdfparser-pdf",
        "category": "Customers",
        "upload_userid": "torviswesley",
        "date_uploaded": "2022-11-30",
        "text_data": "E xtr a ctin g T ext & Im ages fr o m P D F F ile s A ugust 0 4, 2 010 Update : J a nuary 2 9, 2 012 I'v e c o rre cte d th is c o de to w ork w it h th e cu rre nt v e rs io n o f p dfm in er a nd it 's n ow a va ila ble a s a g it h ub r e po: http s://g it h ub.c o m /d papath anasio u/p dfm in er-la yo ut- s ca nner PD FM in er is a pdf p ars in g lib ra ry w rit te n in Pyth on b y Yusu ke S hin ya m a . In a ddit io n to th e pdf2 tx t.p y a nd dum ppdf.p y c o m mand lin e to ols , th ere is a w ay o f analy zin g th e c o nte nt tr e e o f e ach p age . Sin ce th at's exa ctly th e k in d o f p ro gra m matic p ars in g I w ante d to u se P D FM in er fo r, th is is a m ore c o m ple te e xa m ple , w hic h c o ntin ues where th e d efa ult d ocu m enta tio n s to ps . This e xa m ple is s till a w ork -in -p ro gre ss, w it h ro om fo r im pro ve m ent . In th e n ext fe w s e ctio ns, I d escrib e h ow I b uilt u p e ach fu nctio n, r e so lv in g p ro ble m s I e nco unte re d a lo ng th e w ay. T he im patie nt c a n ju st get th e c o de h ere in ste ad. Basic F ra m ew ork Here a re th e p yth on im ports w e n eed fo r P D FM in er: from pdfminer.pdfparser import PDFParser, PDFDocument, PDFNoOutlines from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter from pdfminer.converter import PDFPageAggregator from pdfminer.layout import LAParams, LTTextBox, LTTextLine, LTFigure, LTImage Sin ce P D FM in er r e quir e s a s e rie s o f in it ia liz a tio ns fo r e ach p df file , I'v e s ta rte d w it h th is w ra pper ( Lis p m acro s ty le ) fu nctio n to ta ke c a re o f th e b asic p re lim in ary a ctio ns ( file IO , P D FM min er o bje ct c re atio n a nd c o nnectio n, e tc .) . def with_pdf (pdf_doc, pdf_pwd, fn, *args): \"\"\"Open the pdf document, and apply the function, returning the results\"\"\" result = None try: # open the pdf file fp = open(pdf_doc, 'rb') # create a parser object associated with the file object parser = PDFParser(fp) # create a PDFDocument object that stores the document structure doc = PDFDocument() # connect the parser and document objects parser.set_document(doc) doc.set_parser(parser) # supply the password for initialization doc.initialize(pdf_pwd) if doc.is_extractable: # apply the function and return the result result = fn(doc, *args) # close the pdf file fp.close() except IOError: # the file doesn't exist or similar problem pass return result The fir s t tw o p ara m ete rs a re th e n am e o f th e p df file , a nd it s p assw ord . T he th ir d p ara m ete r, fn , is a hig her-o rd er fu nctio n w hic h ta ke s th e in sta nce o f th e p dfm in er.p dfp ars e r.P D FD ocu m ent c re ate d, a nd a pplie s w hate ve r a ctio n w e w ant ( g et th e ta ble o f c o nte nts , w alk th ro ugh th e pdf p age b y p age, e tc .) The la st p art o f th e s ig natu re , * a rg s, is a n o ptio nal lis t o f p ara m ete rs th at c a n b e p asse d to th e h ig h-o rd er fu nctio n a s n eeded ( I c o uld h ave gone w it h ke yw ord a rg um ents h ere in ste ad, b ut a s im ple lis t is e nough fo r th ese e xa m ple s). As a w arm -u p, h ere 's a n e xa m ple o f h ow to u se th e w it h _pdf( ) fu nctio n to fe tc h th e ta ble o f c o nte nts fr o m a p df file : def _parse_toc (doc): \"\"\"With an open PDFDocument object, get the table of contents (toc) data [this is a higher-order function to be passed to with_pdf()]\"\"\" toc = [] try: outlines = doc.get_outlines() for (level,title,dest,a,se) in outlines: toc.append( (level, title) ) except PDFNoOutlines: pass return toc The _ pars e _to c() fu nctio n is th e h ig her-o rd er fu nctio n w hic h g ets p asse d to w it h _pdf( ) a s th e fn p ara m ete r. It e xp ects a s in gle p ara m ete r, doc, w hic h is th e th e in sta nce o f th e p dfm in er.p dfp ars e r.P D FD ocu m ent c re ate d w it h in w it h _pdf( ) it s e lf ( n ote th at if w it h _pdf( ) c o uld n't fin d th e file , th en _ pars e _to c() d oesn 't g et c a lle d). Wit h a ll th e P D FM in er o ve rh ead a nd in it ia liz a tio n d one b y w it h _pdf( ), _ pars e _to c() c a n ju st fo cu s o n c o lle ctin g th e ta ble o f c o nte nt d ata a nd re tu rn in g th em a s a lis t. T he g et_ outlin es() c a n r a is e a \" P D FN oO utlin es\" e rro r, s o I c a tc h it a s a n e xce ptio n, a nd s im ply r e tu rn a n e m pty lis t in th at c a se . All th at's le ft to d o is d efin e th e fu nctio n th at in vo ke s _ pars e _to c() fo r a s p ecif ic p df file ; th is is a ls o th e fu nctio n th at a ny e xte rn al u se rs o f th is m odule w ould u se to g et th e ta ble o f c o nte nts lis t. N ote th at th e p df p assw ord d efa ult s to a n e m pty s tr in g ( w hic h is w hat P D FM in er w ill use fo r d ocu m ents th at a re n't p assw ord -p ro te cte d), b ut th at c a n b e o ve rrid en a s n eeded. def get_toc (pdf_doc, pdf_pwd=''): \"\"\"Return the table of contents (toc), if any, for this pdf file\"\"\" return with_pdf(pdf_doc, pdf_pwd, _parse_toc) Pag e P ars in g Next, o nto la yo ut a naly sis . U sin g th e w it h _pdf( ) w ra pper, w e c a n r e pro duce th e e xa m ple in th e d ocu m enta tio n w it h th is h ig her-o rd er fu nctio n: def _parse_pages (doc): \"\"\"With an open PDFDocument object, get the pages and parse each one [this is a higher-order function to be passed to with_pdf()]\"\"\" rsrcmgr = PDFResourceManager() laparams = LAParams() device = PDFPageAggregator(rsrcmgr, laparams=laparams) interpreter = PDFPageInterpreter(rsrcmgr, device) for page in doc.get_pages(): interpreter.process_page(page) # receive the LTPage object for this page layout = device.get_result() # layout is an LTPage object which may contain child objects like LTTextBox, LTFigure, LTImage, etc. And th is e xte rn al fu nctio n, w hic h d efin es th e s p ecif ic p df file to a naly ze : def get_pages (pdf_doc, pdf_pwd=''): \"\"\"Process each of the pages in this pdf file\"\"\" with_pdf(pdf_doc, pdf_pwd, _parse_pages) So fa r, th is c o de d oesn 't d o a nyth in g e xcit in g: it ju st lo ads e ach p age in to a p dfm in er.la yo ut.L T P age o bje ct, c lo se s th e p df file , a nd e xit s . Wit h in e ach p dfm in er.la yo ut.L T P age in sta nce , th ough, is a n o bjs a ttr ib ute , w hic h d efin es th e tr e e o f p dfm in er.la yo ut.L T * c h ild o bje cts a s in th e d ocu m enta tio n: In th is e xa m ple , I'm g oin g to c o lle ct a ll th e te xt fr o m e ach p age in a to p-d ow n, le ft- to -rig ht s e quence , m erg in g a ny m ult ip le c o lu m ns in to a sin gle s tr e am o f c o nse cu tiv e te xt. The r e su lt s a re n ot a lw ays p erfe ct, b ut I'm u sin g a fu zzy lo gic b ase d o n p hysic a l p osit io n a nd c o lu m n w id th , w hic h is v e ry g ood in m ost ca se s. I'm a ls o g oin g to s a ve a ny im ages fo und to a s e para te fo ld er, a nd m ark th eir p osit io n in th e te xt w it h < im g /> ta gs. Rig ht n ow , I'm o nly a ble to e xtr a ct jp eg im ages, w here as x p df's pdfim ages to ol is c a pable o f g ettin g to n on-jp eg im ages a nd s a vin g th em a s ppm fo rm at. I'm n ot s u re if th e p ro ble m is w it h in P D FM in er o r h ow I'm u sin g it , b ut s in ce so m eone e ls e a ske d th e s a m e q uestio n in th e P D FM in er m ailin g lis t , I s u sp ect it 's th e fo rm er. This r e quir e s a fe w u pdate s to th e _ pars e _pages() fu nctio n, a s fo llo w s: def _parse_pages (doc, images_folder): \"\"\"With an open PDFDocument object, get the pages, parse each one, and return the entire text [this is a higher-order function to be passed to with_pdf()]\"\"\" rsrcmgr = PDFResourceManager() laparams = LAParams() device = PDFPageAggregator(rsrcmgr, laparams=laparams) interpreter = PDFPageInterpreter(rsrcmgr, device) text_content = [] # a list of strings, each representing text collected from each page of the doc for i, page in enumerate(doc.get_pages()): interpreter.process_page(page) # receive the LTPage object for this page layout = device.get_result() # layout is an LTPage object which may contain child objects like LTTextBox, LTFigure, LTImage, etc. text_content.append(parse_lt_objs(layout.objs, (i+1), images_folder)) return text_content and th e u pdate d g et_ pages() fu nctio n b eco m es: def get_pages (pdf_doc, pdf_pwd='', images_folder='/tmp'): \"\"\"Process each of the pages in this pdf file and print the entire text to stdout\"\"\" print '\\n\\n'.join(with_pdf(pdf_doc, pdf_pwd, _parse_pages, *tuple([images_folder]))) New in b oth fu nctio nal s ig natu re s is im ages_ fo ld er, w hic h is a p ara m ete r th at r e fe rs to th e p la ce o n th e lo ca l file syste m w here a ny e xtr a cte d im ages w ill b e b e s a ve d ( th is is a ls o a n e xa m ple o f w hy d efin in g w it h _pdf( ) w it h a n o ptio nal * a rg s lis t c o m es in h andy). Aggre g atin g T ext Wit h in th e _ pars e _pages() fu nctio n, te xt_ co nte nt is a n ew v a ria ble o f ty p e lis t, w hic h c o lle cts th e te xt o f e ach p age, a nd I'v e a dded a n enum era tio n s tr u ctu re a ro und d oc.g et_ pages(), to k e ep tr a ck o f w hic h p age w e'r e a cce ssin g a t a ny g iv e n tim e. T his is u se fu l fo r s a vin g im ages c o rre ctly , s in ce s o m e p df file s u se th e s a m e im age n am e in m ult ip le p la ce s to r e fe r to d if fe re nt im ages ( th is c re ate s p ro ble m s fo r dum ppdf.p y's - i s w it c h , fo r e xa m ple ). The n ew c rit ic a l lin e in _ pars e _pages() is th is o ne: text_content.append(parse_lt_objs(layout.objs, (i+1), images_folder)) Sin ce th e tr e e o f p age o bje cts is r e cu rs iv e in n atu re ( e .g ., a p dfm in er.la yo ut.L T Fig ure o bje ct m ay h ave m ult ip le c h ild o bje cts ), it 's b ette r to handle th e a ctu al te xt p ars in g a nd im age c o lle ctio n in a s e para te fu nctio n. T hat fu nctio n, p ars e _lt _ objs (), lo oks lik e th is : def parse_lt_objs (lt_objs, page_number, images_folder, text=[]): \"\"\"Iterate through the list of LT* objects and capture the text or image data contained in each\"\"\" text_content = [] for lt_obj in lt_objs: if isinstance(lt_obj, LTTextBox) or isinstance(lt_obj, LTTextLine): # text text_content.append(lt_obj.get_text()) elif isinstance(lt_obj, LTImage): # an image, so save it to the designated folder, and note it's place in the text saved_file = save_image(lt_obj, page_number, images_folder) if saved_file: # use html style tag to mark the position of the image within the text text_content.append('') else: print >> sys.stderr, \"Error saving image on page\", page_number, lt_obj.__repr__ elif isinstance(lt_obj, LTFigure): # LTFigure objects are containers for other LT* objects, so recurse through the children text_content.append(parse_lt_objs(lt_obj.objs, page_number, images_folder, text_content)) return '\\n'.join(text_content) In th is e xa m ple , I'm c o nce rn ed w it h ju st fo ur o bje cts w hic h m ay a ppear w it h in a p dfm in er.la yo ut.L T P age o bje ct: 1 . LT TextB ox a nd L LT extL in e ( w hic h , b eca use th e te xt e xtr a ctio n is e xa ctly th e s a m e, I tr e at a s o ne c a se ) 2 . LT Im age ( w hic h w e'l l tr y to s a ve o n to th e lo ca l file syste m in th e d esig nate d fo ld er) 3 . LT Fig ure ( w hic h w e'l l tr e at a s a s im ple c o nta in er fo r o th er o bje cts , h ence th e r e cu rs iv e c a ll in th at c a se ) For th e s im ple te xt a nd im age e xtr a ctio n I'm d oin g h ere , th is is e nough. T here is r o om fo r im pro ve m ent, th ough, s in ce I'm ig norin g s e ve ra l ty p es o f p dfm in er.la yo ut.L T * o bje cts w hic h d o a ppear in p df p ages. If y o u tr y to r u n g et_ pages() n ow , y o u m ig ht g et th is e rro r, in th e te xt_ co nte nt.a ppend(lt _ obj. g et_ te xt( )) lin e ( it w ill d epend o n th e c o nte nt o f th e p df file y o u'r e tr y in g to p ars e , a s w ell a s h ow y o ur in sta nce o f P yth on is c o nfig ure d, a nd w heth er o r n ot y o u in sta lle d P D FM in er w it h cm ap fo r C JK la nguages ). UnicodeEncodeError: 'ascii' codec can't encode character u'\\u2014' in position 61: ordinal not in range(128) As E lio t e xp la in s, \" This e rro r o ccu rs w hen y o u p ass a U nic o de s tr in g c o nta in in g n on-E nglis h c h ara cte rs ( U nic o de c h ara cte rs b eyo nd 1 28) to so m eth in g th at e xp ects a n A SC II b yte str in g. T he d efa ult e nco din g fo r a P yth on b yte str in g is A SC II .\" This fu nctio n, w hic h I w ro te a fte r r e adin g th is a rtic le , s o lv e s th e p ro ble m : def to_bytestring (s, enc='utf-8'): \"\"\"Convert the given unicode string to a bytestring, using the standard encoding, unless it's already a bytestring\"\"\" if s: if isinstance(s, str): return s else: return s.encode(enc) So th e u pdate d v e rs io n o f p ars e _lt _ objs () b eco m es: def parse_lt_objs (lt_objs, page_number, images_folder, text=[]): \"\"\"Iterate through the list of LT* objects and capture the text or image data contained in each\"\"\" text_content = [] for lt_obj in lt_objs: if isinstance(lt_obj, LTTextBox) or isinstance(lt_obj, LTTextLine): # text text_content.append(lt_obj.get_text()) elif isinstance(lt_obj, LTImage): # an image, so save it to the designated folder, and note it's place in the text saved_file = save_image(lt_obj, page_number, images_folder) if saved_file: # use html style tag to mark the position of the image within the text text_content.append('') else: print >> sys.stderr, \"Error saving image on page\", page_number, lt_obj.__repr__ elif isinstance(lt_obj, LTFigure): # LTFigure objects are containers for other LT* objects, so recurse through the children text_content.append(parse_lt_objs(lt_obj.objs, page_number, images_folder, text_content)) return '\\n'.join(text_content) Runnin g th is v e rs io n g iv e s r e aso nable r e su lt s o n p df file s w here th e te xt is s in gle -c o lu m n, a nd w it h out m any s id ebars , a bstr a cts , s u m mary quote s, o r o th er fa ncy ty p ese ttin g la yo uts . It r e ally b re aks d ow n, th ough, in th e c a se o f m ult i- c o lu m n p ages: th e r e su lt in g te xt_ co nte nt ju m ps fr o m o ne p ara gra ph to th e n ext, in n o co here nt o rd er. PD FM in er d oes p ro vid e tw o g ro upin g fu nctio ns, g ro up_te xtb ox_ lr _ tb a nd g ro up_te xtb ox_ tb _rl [lr = le ft- to -rig ht, tb = to p-to -b otto m ], b ut th ey d o th e g ro upin g lit e ra lly , w it h out c o nsid erin g th e lik e lih ood th at th e c o nte nt o f o ne te xtb ox lo gic a lly b elo ngs a fte r a noth er's . Fortu nate ly , th ough, e ach o bje ct a ls o p ro vid es a b box ( b oundin g b ox) a ttr ib ute , w hic h is a fo ur-p art tu ple o f th e o bje ct's p age p osit io n: ( x 0 , y0 , x 1 , y 1 ). Usin g th e b box d ata , w e c a n g ro up th e te xt a cco rd in g to it s p osit io n a nd w id th , m akin g it m ore lik e ly th e c o lu m ns w e jo in to geth er th is w ay re pre se nt th e c o rre ct lo gic a l flo w o f th e te xt. To a ggre gate th e te xt th is w ay, I a dded th e fo llo w in g P yth on d ic tio nary v a ria ble to th e p ars e _lt _ objs () c o de, ju st b efo re it e ra tin g th ro ugh th e lis t o f lt _ objs : p age_te xt= {}. The k e y fo r e ach e ntr y is a tu ple o f th e b box's ( x 0 , x 1 ) p oin ts , a nd th e c o rre sp ondin g v a lu e is a lis t o f te xt s tr in gs fo und w it h in th at b box. T he x0 v a lu e te lls m e th e le ft o ffs e t fo r a g iv e n p ie ce o f te xt a nd th e x 1 v a lu e te lls m e h ow w id e it is . So b y g ro upin g te xt w hic h s ta rts a t th e s a m e h oriz o nta l p la ne a nd h as th e s a m e w id th , I c a n a ggre gate a ll p ara gra phs b elo ngin g to th e sa m e c o lu m n, r e gard le ss o f th eir v e rtic a l p osit io n o r le ngth . Conce ptu ally , e ach e ntr y in th e p age_te xt d ic tio nary r e pre se nts a ll th e te xt a sso cia te d w it h e ach p hysic a l c o lu m n. When I tr ie d th is th e fir s t tim e, I w as s u rp ris e d ( th ough in r e tr o sp ect, I s h ould n't h ave b een, s in ce n oth in g a bout p ars in g p dfs is n eat o r cle an), th at tw o te xtb oxe s w hic h lo ok p erfe ctly a lig ned v is u ally h ave s lig htly d if fe re nt x 0 a nd x 1 v a lu es ( a t le ast a cco rd in g to P D FM in er). For e xa m ple , o ne p ara gra ph m ay h ave x 0 a nd x 1 v a lu es o f 2 8.1 6 a nd 1 53.3 2 r e sp ectiv e ly , a nd th e p ara gra ph r ig ht u ndern eath it h ad a n x 0 va lu e o f 2 9.0 4 a nd a n x 1 v a lu e o f 1 52.0 9. To g et a ro und th is , I w ro te th e fo llo w in g u pdate fu nctio n, w hic h a ssig ns k e y tu ple s b ase d o n h ow c lo se a n ( x 0 , x 1 ) p air lie s w it h in a n e xis tin g entr y 's k e y. T he 2 0 p erc e nt v a lu e w as a rriv e d a t b y tr ia l- a nd-e rro r, a nd s e em s to b e a cce pta ble fo r m ost p df file s I tr ie d. def update_page_text_hash (h, lt_obj, pct=0.2): \"\"\"Use the bbox x0,x1 values within pct% to produce lists of associated text within the hash\"\"\" x0 = lt_obj.bbox[0] x1 = lt_obj.bbox[2] key_found = False for k, v in h.items(): hash_x0 = k[0] if x0 >= (hash_x0 * (1.0-pct)) and (hash_x0 * (1.0+pct)) >= x0: hash_x1 = k[1] if x1 >= (hash_x1 * (1.0-pct)) and (hash_x1 * (1.0+pct)) >= x1: # the text inside this LT* object was positioned at the same # width as a prior series of text, so it belongs together key_found = True v.append(to_bytestring(lt_obj.get_text())) h[k] = v if not key_found: # the text, based on width, is a new series, # so it gets its own series (entry in the hash) h[(x0,x1)] = [to_bytestring(lt_obj.get_text())] return h Wit h th is in p la ce , I c o uld u pdate th e p ars e _lt _ objs () to u se it . def parse_lt_objs (lt_objs, page_number, images_folder, text=[]): \"\"\"Iterate through the list of LT* objects and capture the text or image data contained in each\"\"\" text_content = [] page_text = {} # k=(x0, x1) of the bbox, v=list of text strings within that bbox width (physical column) for lt_obj in lt_objs: if isinstance(lt_obj, LTTextBox) or isinstance(lt_obj, LTTextLine): # text, so arrange is logically based on its column width page_text = update_page_text_hash(page_text, lt_obj) elif isinstance(lt_obj, LTImage): # an image, so save it to the designated folder, and note it's place in the text saved_file = save_image(lt_obj, page_number, images_folder) if saved_file: # use html style tag to mark the position of the image within the text text_content.append('') else: print >> sys.stderr, \"error saving image on page\", page_number, lt_obj.__repr__ elif isinstance(lt_obj, LTFigure): # LTFigure objects are containers for other LT* objects, so recurse through the children text_content.append(parse_lt_objs(lt_obj.objs, page_number, images_folder, text_content)) for k, v in sorted([(key,value) for (key,value) in page_text.items()]): # sort the page_text hash by the keys (x0,x1 values of the bbox), # which produces a top-down, left-to-right sequence of related columns text_content.append('\\n'.join(v)) return '\\n'.join(text_content) The la st b lo ck b efo re th e r e tu rn s ta te m ent s o rts th e p age_te xt ( x 0 , x 1 ) k e ys s o th at th e r e su lt in g te xt is r e tu rn ed in a to p-d ow n, le ft- to -rig ht se quence , b ase d o n w here th e te xt a ppeare d v is u ally o n th e p age. Extr a ctin g Im ag es The la st th in g to d is cu ss in th is e xa m ple is th e e xtr a ctio n o f im ages. As I m entio ned a bove , th is a re a n eeds im pro ve m ent, s in ce it s e em s th at I c a n o nly e xtr a ct jp eg im ages u sin g P D FM in er ( th ough to b e fa ir to Yusu ke , h e d oes d escrib e it a s a to ol th at \" fo cu se s e ntir e ly o n g ettin g a nd a naly zin g te xt d ata \", s o p erh aps d oin g m ore th an jp eg is o ut- o f- sco pe fo r th is lib ra ry ). Wit h in p ars e _lt _ objs (), th e fo llo w in g fu nctio n is c a lle d if a n L T Im age is fo und; it w as b ase d o n s tu dyin g th e dum ppdf.p y s o urc e c o de a nd how it h andle d im age e xtr a ctio n r e quests : def save_image (lt_image, page_number, images_folder): \"\"\"Try to save the image data from this LTImage object, and return the file name, if successful\"\"\" result = None if lt_image.stream: file_stream = lt_image.stream.get_rawdata() file_ext = determine_image_type(file_stream[0:4]) if file_ext: file_name = ''.join([str(page_number), '_', lt_image.name, file_ext]) if write_file(images_folder, file_name, lt_image.stream.get_rawdata(), flags='wb'): result = file_name return result The s a ve _im age() fu nctio n n eeds th e fo llo w in g tw o s u pportin g fu nctio ns d efin ed: def determine_image_type (stream_first_4_bytes): \"\"\"Find out the image file type based on the magic number comparison of the first 4 (or 2) bytes\"\"\" file_type = None bytes_as_hex = b2a_hex(stream_first_4_bytes) if bytes_as_hex.startswith('ffd8'): file_type = '.jpeg' elif bytes_as_hex == '89504e47': file_type = ',png' elif bytes_as_hex == '47494638': file_type = '.gif' elif bytes_as_hex.startswith('424d'): file_type = '.bmp' return file_type The d ete rm in e_im age_ty p e() fu nctio n is b ase d o n th e c o nce pt o f magic n um bers , w here it 's ( s o m etim es) p ossib le to te ll w hat a b in ary str e am m eans b y e xm ain g th e fir s t tw o o r fo urs b yte s. In th eory , a p df file c a n h ave a ny o f th ese im age ty p es, b ut in p ra ctic e , th e o nly o ne P D FM in er c a n s e em to fin d a s a n L T Im age o bje ct a re jp egs. def write_file (folder, filename, filedata, flags='w'): \"\"\"Write the file data to the folder and filename combination (flags: 'w' for write text, 'wb' for write binary, use 'a' instead of 'w' for append)\"\"\" result = False if os.path.isdir(folder): try: file_obj = open(os.path.join(folder, filename), flags) file_obj.write(filedata) file_obj.close() result = True except IOError: pass return result The w rit e _file () fu nctio n is ju st b asic file IO , b ut it d oes s o m e c o nve nie nt th in gs a ro und c h eckin g th at th e d esig nate d fo ld er e xis ts , to o. Fin ally , to s u pport a ll th re e im age s a vin g fu nctio ns, w e n eed th e fo llo w in g p yth on im ports : import sys import os from binascii import b2a_hex Sam ple R esu lt s So, h ow w ell d oes it w ork ? It's s u rp ris in gly g ood, a s it tu rn s o ut. Here 's a n e xa m ple fr o m u sin g th e a bove c o de to p ro ce ss th e Hacke r M onth ly Is su e 2 p df file ( th is w as p art o f th e p ro ce ss I u se d to c o nve rt th is file to e -b ook fo rm at fo r in clu sio n in th e Fif o books C ata lo g ). Page 5 , w hic h lo oks lik e th is v is u ally : ca m e o ut lik e th is : \"Leave the ad revenue and crazy business model revenue streams to the startups with venture funding.\" on the company. But the advantage here is that after a few months off the ground you'll have a clear sense of how soon that day can come. Another advantage of a bootstrapped company on the SaaS model is that it's really easy to calculate your cash flow. It goes without saying that the people you work with should have complementary skills to your own, but the bootstrapper's \"slow but steady\" mindset is just as important to the health of your company. you'll find a lot of people may not be comfortable with this approach. Weed those people out as co-found- ers when you're bootstrapping a company. A one and done approach won't work here. off Hours Almost every bootstrapped company begins as an off-hours tinkering project. That's true of Carbonmade, which Dave built for himself first; that's true of TypeFrag, which I built over the course of a week during my sophomore year in college; that's true of 37signals' Basecamp, true of Anthony's Hype Machine and lots of other companies. The good thing about bootstrap- ping is that you don't need to spend ping is that you don't need to spend a single penny outside of server costs and you can even do most things locally before having to pay any money on a server. your biggest expense is time, and that's why off hours are so important. Consult on the Side The way we started Carbonmade, the way 37signals started, the way Harvest started, and many other startups too, was by first running a consulting shop. We ran a design con- sulting company called nterface that Carbonmade grew out of. It's great, because the money you're bringing in through client work tides you over while you're waiting for your startup to grow. Carbonmade was live for nearly 18 months before we started working on it full-time. During those first 18 months, we were taking on lots of client work to pay our bills. The great thing about consulting through the early months is that you can take on fewer and fewer jobs as your revenue builds up. For example, you may need a dozen large projects during the first year and only two or three during the second year. That was the case for us. I know of other successful bootstrapped companies that during the first year would take on a single client project for a month or two, charging an appropriate amount, and that would give them just enough leeway to work on their startup for two or three months. Then they'd rinse and repeat. They did this for the first year and a half before making enough money to work on their startup full-time. there's no need to Rush When you're bootstrapping there's no rush to get things out the door, even though that's all you hear these 5 While th ere w ere s o m e s m all p ro ble m s a ro und c a pit a liz a tio n a nd s p acin g, th e c o nve rs io n d id r e co gniz e a nd s a ve th e b ackg ro und im age, it dis tin guis h ed th e s u m mary q uote a s b ein g s e para te fr o m th e r e st o f th e te xt, a nd th e c o lu m ns w ere m erg ed c o rre ctly , flo w in g in th e s a m e manner th e a uth or w ro te th em . Room f o r Im pro vem en t There a re s e ve ra l th in gs I'd lik e to b e a ble to d o b ette r; s o m e p ro bably r e quir e c h anges to P D FM in er it s e lf , w hile o th ers a re th in gs in m y co de w hic h I s h ould im pro ve . Colu m n M erg in g  w hile th e fu zzy h euris tic I d escrib ed w ork s w ell fo r th e p df file s I'v e p ars e d s o fa r, I c a n im agin e m ore c o m ple x docu m ents w here it w ould b re ak-d ow n ( p erh aps th is is w here th e a naly sis s h ould b e m ore s o phis tic a te d, a nd n ot ig nore s o m any ty p es o f p dfm in er.la yo ut.L T * o bje cts ). Im age E xtr a ctio n  I'd lik e to b e a ble to b e at le ast a s g ood a s p dfto im ages, a nd s a ve e ve ry file in p pm o r p nm d efa ult fo rm at, b ut I'm not s u re w hat I c o uld b e d oin g d if fe re ntly Tit le a nd H eadin g C apit a liz a tio n  th is s e em s to b e a n is su e w it h P D FM in er, s in ce I g et s im ila r r e su lt s in u sin g th e c o m mand lin e to ols , b ut it is a nnoyin g to h ave to g o b ack a nd fix a ll th e m is -c a pit a liz a tio ns m anually , p artic u la rly fo r la rg er d ocu m ents . Tit le a nd H eadin g F onts a nd S pacin g  a r e la te d is su e, th ough p ro bably s o m eth in g in m y o w n c o de, is th at th ose s a m e tit le a nd para gra ph h eadin gs a re n't d is tin guis h ed fr o m th e r e st o f th e te xt. In m any c a se s, I h ave to g o b ack a nd a dd v e rtic a l s p acin g a nd fo nt attr ib ute s fo r th ose m anually . Page N um ber R em ova l  o rig in ally , I th ought I c o uld ju st u se a r e gex fo r a n a ll- n um eric v a lu e o n a s in gle p hysic a l lin e, b ut e ach docu m ent d oes p age n um berin g s lig htly d if fe re ntly , a nd it 's v e ry d if fic u lt to g et r id o f th ese w it h out m anually p ro ofr e adin g e ach p age. Footn ote s  h andlin g th ese w here th e n ote a nd th e r e fe re nce b oth a ppear o n th e s a m e p age is h ard e nough, b ut d oin g it w hen th ey sp an d if fe re nt ( e ve n c o nse cu tiv e ) p ages is w ors e . Arc h iv e d fr o m th e o rig in al a t http ://d enis .p apath anasio u.o rg / B it c o in D onate : 14T M 4A D KJb aG Ei8 Q r8 dh4K fP BQ m jT sh kZ 2",
        "metadata": "{\"Title\":\"Extracting Text & Images from PDF Files\",\"Creator\":\"wkhtmltopdf 0.12.4\",\"Producer\":\"Qt 4.8.7\",\"CreationDate\":\"2018-03-04T14:32:30-05:00\",\"Pages\":10,\"FileSize\":\"211kB\",\"PdfVersion\":\"PDF-1.4 1\"}"
    },
    {
        "ID": "37",
        "image_url": "http://demo2.legoeso.com/wp-content/uploads/2022/11/legoeso_pdm_data/images/3791669846931.jpg",
        "filename": "building-django-2-0-web_-applications-pdf",
        "category": "General",
        "upload_userid": "torviswesley",
        "date_uploaded": "2022-11-30",
        "text_data": "* NO DATA *",
        "metadata": "{\"Producer\":\"Acrobat Distiller 9.0.0 (Windows)\",\"Creator\":\"Adobe Acrobat 9.0.0\",\"Author\":\"Tom Aratyn\",\"ModDate\":\"2018-05-24T14:22:28-04:00\",\"Title\":\"Building Django 2.0 Web Applications\",\"CreationDate\":\"2018-05-24T14:20:11-04:00\",\"EBX_PUBLISHER\":\"Packt Publishing\",\"Pages\":397,\"FileSize\":\"2.33MB\",\"PdfVersion\":\"PDF-1.5 %\"}"
    },
    {
        "ID": "38",
        "image_url": "http://demo2.legoeso.com/wp-content/uploads/2022/11/legoeso_pdm_data/images/6371669846934.jpg",
        "filename": "numerical-methods-in_-engineering-with_-python-3-pdf",
        "category": "General",
        "upload_userid": "torviswesley",
        "date_uploaded": "2022-11-30",
        "text_data": "* NO DATA *",
        "metadata": "{\"Author\":\"Kiusalaas, Jaan\",\"CreationDate\":\"2014-08-28T23:32:59+00:00\",\"Creator\":\"LaTeX with hyperref package + hypdvips\",\"EBX_PUBLISHER\":\"Cambridge eText\",\"ModDate\":\"2014-08-29T01:54:56+01:00\",\"Producer\":\"Acrobat Distiller 7.0.5 (Windows)\",\"Subject\":\"\",\"Title\":\"Numerical Methods in Engineering with Python 3\",\"Pages\":438,\"FileSize\":\"2.29MB\",\"PdfVersion\":\"PDF-1.6 %\"}"
    },
    {
        "ID": "40",
        "image_url": "http://demo2.legoeso.com/wp-content/uploads/2022/11/legoeso_pdm_data/images/2441669846940.jpg",
        "filename": "python-programming-an_-introduction-to_-computer-science-2nd-edition-pdf",
        "category": "General",
        "upload_userid": "torviswesley",
        "date_uploaded": "2022-11-30",
        "text_data": "* NO DATA *",
        "metadata": ""
    },
    {
        "ID": "43",
        "image_url": "http://demo2.legoeso.com/wp-content/uploads/2022/11/legoeso_pdm_data/images/4811669846948.jpg",
        "filename": "python-web_-penetration-testing-cookbook-pdf",
        "category": "General",
        "upload_userid": "torviswesley",
        "date_uploaded": "2022-11-30",
        "text_data": "* NO DATA *",
        "metadata": ""
    },
    {
        "ID": "44",
        "image_url": "http://demo2.legoeso.com/wp-content/uploads/2022/11/legoeso_pdm_data/images/101669846951.jpg",
        "filename": "machine-learning-pdf",
        "category": "General",
        "upload_userid": "torviswesley",
        "date_uploaded": "2022-11-30",
        "text_data": "* NO DATA *",
        "metadata": "{\"Author\":\"Rudolph Russell\",\"CreationDate\":\"2018-06-21T17:49:18+00:00\",\"Creator\":\"calibre 3.23.0 [https:\\/\\/calibre-ebook.com]\",\"Producer\":\"calibre 3.23.0 [https:\\/\\/calibre-ebook.com]\",\"Title\":\"Machine Learning: Step-by-Step Guide To Implement Machine Learning Algorithms with Python\",\"Pages\":103,\"FileSize\":\"1.58MB\",\"PdfVersion\":\"PDF-1.4 %\"}"
    },
    {
        "ID": "45",
        "image_url": "http://demo2.legoeso.com/wp-content/uploads/2022/11/legoeso_pdm_data/images/4001669846953.jpg",
        "filename": "python-cookbook-pdf",
        "category": "General",
        "upload_userid": "torviswesley",
        "date_uploaded": "2022-11-30",
        "text_data": "* NO DATA *",
        "metadata": "{\"Creator\":\"Chapter 3 -20.doc - Microsoft Word\",\"CreationDate\":\"2003-03-22T07:15:58+00:00\",\"Title\":\"Chapter 3 -20.doc\",\"Author\":\"kefoo\",\"Producer\":\"Acrobat PDFWriter 5.0 for Windows NT\",\"ModDate\":\"2003-03-22T07:35:57+08:00\",\"Pages\":677,\"FileSize\":\"1.56MB\",\"PdfVersion\":\"PDF-1.4 %\"}"
    },
    {
        "ID": "46",
        "image_url": "http://demo2.legoeso.com/wp-content/uploads/2022/11/legoeso_pdm_data/images/831669846956.jpg",
        "filename": "python-3-for_-absolute-beginners-pdf",
        "category": "General",
        "upload_userid": "torviswesley",
        "date_uploaded": "2022-11-30",
        "text_data": "* NO DATA *",
        "metadata": "{\"CreationDate\":\"2009-10-31T13:34:05+01:00\",\"Keywords\":\"\",\"ModDate\":\"2009-10-31T13:34:05+01:00\",\"Title\":\"Apress - Python 3 for Absolute Beginners (October 2009) (ATTiCA)\",\"Pages\":310,\"FileSize\":\"1.52MB\",\"PdfVersion\":\"PDF-1.6 %\"}"
    },
    {
        "ID": "47",
        "image_url": "http://demo2.legoeso.com/wp-content/uploads/2022/11/legoeso_pdm_data/images/8761669846959.jpg",
        "filename": "python-tricks-the_-book_-pdf",
        "category": "General",
        "upload_userid": "torviswesley",
        "date_uploaded": "2022-11-30",
        "text_data": "* NO DATA *",
        "metadata": "{\"Author\":\"Dan Bader\",\"CreationDate\":\"2017-10-27T15:23:49+02:00\",\"Creator\":\"LaTeX with hyperref package\",\"ModDate\":\"2018-06-21T17:54:35+02:00\",\"Producer\":\"GPL Ghostscript 9.22\",\"Title\":\"Python Tricks: The Book\",\"Pages\":299,\"FileSize\":\"1.25MB\",\"PdfVersion\":\"PDF-1.6 %\"}"
    },
    {
        "ID": "50",
        "image_url": "http://demo2.legoeso.com/wp-content/uploads/2022/11/legoeso_pdm_data/images/6041669846967.jpg",
        "filename": "learn-python-in_-one_-day_-and_-learn_-it_-well_-pdf",
        "category": "General",
        "upload_userid": "torviswesley",
        "date_uploaded": "2022-11-30",
        "text_data": "* NO DATA *",
        "metadata": "{\"Author\":\"LCF Publishing & Jamie Chan\",\"CreationDate\":\"2019-04-01T02:24:09+00:00\",\"Creator\":\"calibre 3.39.1 [https:\\/\\/calibre-ebook.com]\",\"Producer\":\"calibre 3.39.1 [https:\\/\\/calibre-ebook.com]\",\"Title\":\"Learn Python in One Day and Learn It Well: Python for Beginners with Hands-on Project. The only book you need to start coding in Python immediately - PDFDrive.com\",\"Pages\":132,\"FileSize\":\"546kB\",\"PdfVersion\":\"PDF-1.4 %\"}"
    },
    {
        "ID": "51",
        "image_url": "http://demo2.legoeso.com/wp-content/uploads/2022/11/legoeso_pdm_data/images/4881669846969.jpg",
        "filename": "introduction-to_-programming-with_-python-pdf",
        "category": "General",
        "upload_userid": "torviswesley",
        "date_uploaded": "2022-11-30",
        "text_data": "* NO DATA *",
        "metadata": "{\"Author\":\"Vivian Bailey & Thomas Kirby\",\"CreationDate\":\"2016-02-09T22:56:44+00:00\",\"Creator\":\"calibre 2.35.0 [http:\\/\\/calibre-ebook.com]\",\"Producer\":\"calibre 2.35.0 [http:\\/\\/calibre-ebook.com]\",\"Title\":\"Introduction to Programming with Python - Python Programming for Beginners: Learn to Code - Learn Python - Python Tutorial - Object Oriented Programming Python (Software Development Training Book 1\",\"Pages\":97,\"FileSize\":\"492kB\",\"PdfVersion\":\"PDF-1.4 %\"}"
    }
]